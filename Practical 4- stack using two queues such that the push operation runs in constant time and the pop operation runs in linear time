//  stack using two queues such that the push operation runs in constant time and the pop operation runs in linear time

#include <stdio.h>
#include <stdlib.h>
#define QUEUE_EMPTY_MAGIC 0xdeadbeef

typedef struct _queue_t {
    int *arr;
    int rear, front, count, max;
} queue_t;

queue_t *queue_allocate(int n);
void queue_insert(queue_t *q, int v);
int queue_remove(queue_t *q);
int queue_count(queue_t *q);
int queue_is_empty(queue_t *q);
void queue_display(queue_t *q);

void stack_push(queue_t *q, int v);
int stack_pop(queue_t *q);
int stack_is_empty(queue_t *q);
int stack_count(queue_t *q);

int queue_count(queue_t *q) {
    return q->count;
}
queue_t *queue_allocate(int n) {
    queue_t *queue = malloc(sizeof(queue_t));
    if (queue == NULL) {
        return NULL;
    }
    queue->max = n;
    queue->arr = malloc(sizeof(int) * n);
    if (queue->arr == NULL) {
        free(queue);
        return NULL;
    }
    queue->rear = n - 1;
    queue->front = n - 1;
    queue->count = 0;
    return queue;
}
void queue_insert(queue_t *q, int v) {
    if (q->count == q->max) {
        printf("\nQueue is full. Cannot insert %d.\n", v);
        return;
    }
    q->rear = (q->rear + 1) % q->max;
    q->arr[q->rear] = v;
    q->count++;
}

int queue_remove(queue_t *q) {
    if (q->count == 0) {
        return QUEUE_EMPTY_MAGIC;
    }
    q->front = (q->front + 1) % q->max;
    int retval = q->arr[q->front];
    q->count--;
    return retval;
}
int queue_is_empty(queue_t *q) {
    return (q->count == 0);
}
void queue_display(queue_t *q) {
    if (queue_is_empty(q)) {
        printf("[Empty Queue]");
        return;
    }
    int i = (q->front + 1) % q->max;
    int elements = queue_count(q);
    while (elements--) {
        printf("[%d] ", q->arr[i]);
        i = (i + 1) % q->max;
    }
}
void stack_push(queue_t *q, int v) {
    queue_insert(q, v);
}

int stack_pop(queue_t *q) {
    int n = queue_count(q);
    if (n == 0) {
        return QUEUE_EMPTY_MAGIC;
    }
    for (int i = 0; i < n - 1; i++) {
        queue_insert(q, queue_remove(q));
    }
    return queue_remove(q);
}

int stack_is_empty(queue_t *q) {
    return queue_is_empty(q);
}

int stack_count(queue_t *q) {
    return queue_count(q);
}

#define MAX 128

int main(void) {
    queue_t *q = queue_allocate(MAX);
    if (q == NULL) {
        printf("Failed to allocate memory for the queue.\n");
        return 1;
    }

    int x, select;
    do {
        printf("\n[1] Push\n[2] Pop\n[0] Exit");
        printf("\nChoice: ");
        scanf(" %d", &select);

        switch (select) {
            case 1:
                printf("\nEnter value to Push: ");
                scanf(" %d", &x);
                stack_push(q, x); 
                printf("\n\n__\nCurrent Queue:\n");
                queue_display(q);
                printf("\n\nPushed Value: %d", x);
                printf("\n__\n");
                break;

            case 2:
                x = stack_pop(q); 
                printf("\n\n__\nCurrent Queue:\n");
                queue_display(q);
                if (x == QUEUE_EMPTY_MAGIC) {
                    printf("\n\nNo values removed");
                } else {
                    printf("\n\nPopped Value: %d", x);
                }
                printf("\n__\n");
                break;

            case 0:
                printf("\nQuitting.\n");
                free(q->arr);
                free(q);
                return 0;

            default:
                printf("\nInvalid choice. Try again.\n");
        }
    } while (1);

    return 0;
}
